  - platform: rest
    resource: !secret solar_url
    name: solarsensors
    value_template: 'ok'
    json_attributes:
      - modbus_enable
      - modbus_unit_id
      - inverter_article_number
      - inverter_serial_number
      - number_of_bidirectional_converter
      - number_of_ac_phases
      - number_of_pv_strings
      - hardware_version
      - software_version_maincontroller
      - software_version_io_controller
      - power_id
      - inverter_state
      - total_dc_power
      - state_of_energy_manager3
      - home_own_consumption_from_battery
      - home_own_consumption_from_grid
      - total_home_consumption_battery
      - total_home_consumption_grid
      - total_home_consumption_pv
      - home_own_consumption_from_pv
      - total_home_consumption
      - isolation_resistance
      - power_limit_from_evu
      - total_home_consumption_rate
      - worktime
      - actual_cos
      - grid_frequency
      - current_phase_1
      - active_power_phase_1
      - voltage_phase_1
      - current_phase_2
      - active_power_phase_2
      - voltage_phase_2
      - current_phase_3
      - active_power_phase_3
      - voltage_phase_3
      - total_ac_active_power
      - total_ac_reactive_power
      - total_ac_apparent_power
      - battery_charge_current
      - number_of_battery_cycles
      - actual_battery_charge_discharge_current
      - pssb_fuse_state5
      - battery_ready_flag
      - act_state_of_charge
      - battery_temperature
      - battery_voltage
      - cos_powermeter
      - frequency_powermeter
      - current_phase_1_powermeter
      - active_power_phase_1_powermeter
      - reactive_power_phase_1_powermeter
      - apparent_power_phase_1_powermeter
      - voltage_phase_1_powermeter
      - current_phase_2_powermeter
      - active_power_phase_2_powermeter
      - reactive_power_phase_2_powermeter
      - apparent_power_phase_2_powermeter
      - voltage_phase_2_powermeter
      - current_phase_3_powermeter
      - active_power_phase_3_powermeter
      - reactive_power_phase_3_powermeter
      - apparent_power_phase_3_powermeter
      - voltage_phase_3_powermeter
      - total_active_power_powermeter_home_consumption
      - total_reactive_power_powermeter
      - total_apparent_power_powermeter
      - current_dc1
      - power_dc1
      - voltage_dc1
      - current_dc2
      - power_dc2
      - voltage_dc2
      - current_dc3
      - power_dc3
      - voltage_dc3
      - total_yield
      - daily_yield
      - yearly_yield
      - monthly_yield
      - inverter_network_name
      - ip_enable
      - manual_ip_auto_ip
      - ip_address
      - ip_subnetmask
      - ip_gateway
      - ip_auto_dns
      - ip_dns1
      - ip_dns2
      - battery_gross_capacity
      - battery_actual_soc
      - firmware_maincontroller
      - battery_manufacturer
      - battery_model_id
      - battery_serial_number
      - work_capacity
      - inverter_max_power
      - inverter_peak_generation_power_scale_factor4
      - inverter_manufacturer
      - inverter_model_id
      - inverter_serial_number_2
      - inverter_generation_power_actual
      - power_scale_factor4
      - generation_energy
      - energy_scale_factor4
      - actual_battery_charge_discharge_power
      - battery_firmware
      - battery_type6
      - productname
      - power
  - platform: template
    sensors:
      solar_yield:
        value_template: '{{ ((states.sensor.solarsensors.attributes["power_dc1"] | int + states.sensor.solarsensors.attributes["power_dc2"] | int)) }}'
        device_class: power
        unit_of_measurement: W
      battery_charge:
        value_template: '{{ states.sensor.solarsensors.attributes["act_state_of_charge"] }}'
        unit_of_measurement: '%'
      battery_consumption:
        value_template: '{% set batter_cons = states.sensor.solarsensors.attributes["total_dc_power"] - states.sensor.solarsensors.attributes["power_dc1"] - states.sensor.solarsensors.attributes["power_dc2"] | int %}
                        {% if batter_cons > 0 %}
                            {{ batter_cons | int }}
                        {% else %}
                            0
                        {% endif %}'
        device_class: power
        unit_of_measurement: W
      battery_charging:
        value_template: '{% set batter_cons = (states.sensor.solarsensors.attributes["total_dc_power"] - states.sensor.solarsensors.attributes["power_dc1"] - states.sensor.solarsensors.attributes["power_dc2"]) | int %}
                        {% if batter_cons < 0 %}
                            {{ (batter_cons * -1) | int }}
                        {% else %}
                            0
                        {% endif %}'
        device_class: power
        unit_of_measurement: W      
      grid_consumption:
        value_template: '{{ states.sensor.solarsensors.attributes["home_own_consumption_from_grid"] | int }}'
        device_class: power
        unit_of_measurement: W
      grid_feed_in:
        value_template: '{% set feed_in = states.sensor.solarsensors.attributes["inverter_generation_power_actual"] | int - states.sensor.solarsensors.attributes["total_active_power_powermeter_home_consumption"] | int %}
                         {% if feed_in < 9000 and feed_in > 0 %}
                            {{ feed_in | int }}
                        {% else %}
                            0
                        {% endif %} '
        device_class: power
        unit_of_measurement: W
      solar_consumption:
        value_template: '{{ states.sensor.solarsensors.attributes["home_own_consumption_from_pv"] | int }}'
        device_class: power
        unit_of_measurement: W
      house_consumption:
        value_template: '{{ states.sensor.solarsensors.attributes["total_active_power_powermeter_home_consumption"]  | int }}'
        device_class: power
        unit_of_measurement: W
      house_energy:
        value_template: "{% set phase1 =  state_attr('sensor.solarsensors', 'active_power_phase_1_powermeter') %}
                        {% set phase2 =  state_attr('sensor.solarsensors', 'active_power_phase_2_powermeter') %}
                        {% set phase3 =  state_attr('sensor.solarsensors', 'active_power_phase_3_powermeter') %}
                        {{ (phase1 + phase2 + phase3) | int }}"
        device_class: power
        unit_of_measurement: W
      inverter_state:
        value_template: '{{ states.sensor.solarsensors.attributes["inverter_state"]| int }}'
  
  - platform: rest
    resource: !secret heater_url
    name: heatersensors
    value_template: 'ok'
    json_attributes:
      - temp_aussen
      - temp_brauchwasser
      - temp_ruecklauf
      - temp_pufferspeicher
      - temp_eq_eintritt
      - temp_sauggas
      - temp_verdampfung
      - temp_kondensation
      - temp_heissgas
      - niederdruck
      - hochdruck
      - heizkreispumpe
      - pufferladepumpe
      - verdichter
      - stoerung
      - vierwegewentil_luft
      - wmz_durchfluss
      - n_soll_verdichter
      - cop
      - evu_sperre
      - aussentemperatur_verzoegert
      - hkr_solltemp
      - eq_ventilator
      - ww_vorrang
      - expansionsventil
      - verdichtungsanforderung
      - wmz_heizung
      - stromz_heizung
      - wmz_brauchwasser
      - stromz_brauchwasser
      - stromz_gesamt
      - stromz_leistung
      - wmz_gesamt
  - platform: template
    sensors:
      temp_aussen:
        value_template: '{{ states.sensor.heatersensors.attributes["temp_aussen"] / 10 }}'
        device_class: temperature
        unit_of_measurement: °C
      temp_brauchwasser:
        value_template: '{{ states.sensor.heatersensors.attributes["temp_brauchwasser"] / 10 }}'
        device_class: temperature
        unit_of_measurement: °C
      temp_ruecklauf:
        value_template: '{{ states.sensor.heatersensors.attributes["temp_ruecklauf"] / 10 }}'
        device_class: temperature
        unit_of_measurement: °C
      temp_pufferspeicher:
        value_template: '{{ states.sensor.heatersensors.attributes["temp_pufferspeicher"] / 10 }}'
        device_class: temperature
        unit_of_measurement: °C
      temp_eq_eintritt:
        value_template: '{{ states.sensor.heatersensors.attributes["temp_eq_eintritt"] / 10 }}'
        device_class: temperature
        unit_of_measurement: °C
      temp_sauggas:
        value_template: '{{ states.sensor.heatersensors.attributes["temp_sauggas"] / 10 }}'
        device_class: temperature
        unit_of_measurement: °C
      temp_verdampfung:
        value_template: '{{ states.sensor.heatersensors.attributes["temp_verdampfung"] / 10 }}'
        device_class: temperature
        unit_of_measurement: °C
      temp_kondensation:
        value_template: '{{ states.sensor.heatersensors.attributes["temp_kondensation"] / 10 }}'
        device_class: temperature
        unit_of_measurement: °C
      temp_heissgas:
        value_template: '{{ states.sensor.heatersensors.attributes["temp_heissgas"] / 10 }}'
        device_class: temperature
        unit_of_measurement: °C
      niederdruck:
        value_template: '{{ states.sensor.heatersensors.attributes["niederdruck"] }}'
        device_class: pressure
        unit_of_measurement: bar
      hochdruck:
        value_template: '{{ states.sensor.heatersensors.attributes["hochdruck"] }}'
        device_class: pressure
        unit_of_measurement: bar
      heizkreispumpe:
        value_template: '{{ states.sensor.heatersensors.attributes["heizkreispumpe"] }}'
        device_class: temperature
        unit_of_measurement: °C
      pufferladepumpe:
        value_template: '{{ states.sensor.heatersensors.attributes["pufferladepumpe"] }}'
        device_class: temperature
        unit_of_measurement: °C
      verdichter:
        value_template: '{{ states.sensor.heatersensors.attributes["verdichter"] }}'
        device_class: temperature
        unit_of_measurement: °C
      stoerung:
        value_template: '{{ states.sensor.heatersensors.attributes["stoerung"] }}'
      vierwegewentil_luft:
        value_template: '{{ states.sensor.heatersensors.attributes["vierwegewentil_luft"] }}'
        device_class: temperature
        unit_of_measurement: °C
      wmz_durchfluss:
        value_template: '{{ states.sensor.heatersensors.attributes["wmz_durchfluss"] }}'
        device_class: temperature
        unit_of_measurement: °C
      n_soll_verdichter:
        value_template: '{{ states.sensor.heatersensors.attributes["n_soll_verdichter"] }}'
        device_class: temperature
        unit_of_measurement: °C
      cop:
        value_template: '{{ states.sensor.heatersensors.attributes["cop"] }}'
        device_class: temperature
        unit_of_measurement: °C
      eq_ventilator:
        value_template: '{{ states.sensor.heatersensors.attributes["eq_ventilator"] }}'
        device_class: temperature
        unit_of_measurement: °C
      ww_vorrang:
        value_template: '{{ states.sensor.heatersensors.attributes["ww_vorrang"] }}'
        device_class: temperature
        unit_of_measurement: °C
      expansionsventil:
        value_template: '{{ states.sensor.heatersensors.attributes["expansionsventil"] }}'
        device_class: temperature
        unit_of_measurement: °C
      verdichtungsanforderung:
        value_template: '{{ states.sensor.heatersensors.attributes["verdichtungsanforderung"] }}'
        device_class: temperature
        unit_of_measurement: °C
      wmz_heizung:
        value_template: '{{ states.sensor.heatersensors.attributes["wmz_heizung"] }}'
        device_class: power
        unit_of_measurement: W
      stromz_heizung:
        value_template: '{{ states.sensor.heatersensors.attributes["stromz_heizung"] }}'
        device_class: power
        unit_of_measurement: W
      wmz_brauchwasser:
        value_template: '{{ states.sensor.heatersensors.attributes["wmz_brauchwasser"] }}'
        device_class: power
        unit_of_measurement: W
      stromz_brauchwasser:
        value_template: '{{ states.sensor.heatersensors.attributes["stromz_brauchwasser"] }}'
        device_class: power
        unit_of_measurement: kWh
      stromz_gesamt:
        value_template: '{{ states.sensor.heatersensors.attributes["stromz_gesamt"] }}'
        device_class: power
        unit_of_measurement: W
      stromz_leistung:
        value_template: '{{ states.sensor.heatersensors.attributes["stromz_leistung"] }}'
        device_class: power
        unit_of_measurement: W
      wmz_gesamt:
        value_template: '{{ states.sensor.heatersensors.attributes["wmz_gesamt"] }}'
        device_class: power
        unit_of_measurement: W
  - platform: openweathermap
    api_key: !secret owm_api_key
    monitored_conditions:
      - weather
      - temperature
      - wind_speed
      - clouds
      - rain

  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /home
      - type: memory_free
      - type: last_boot
      - type: load_5m
      - type: processor_use

  - platform: template
    sensors:
      vacuum_status:
        friendly_name: "Vacuum - Status"
        value_template: "Status: {{ states.vacuum.walle.attributes.state }}"
      vacuum_battery:
        friendly_name: "Vacuum - Battery"
        value_template: "Battery: {{ states.vacuum.walle.attributes.battery_level }}"
        device_class: battery
        unit_of_measurement: '%'
  - platform: mqtt
    name: "Walle Error"
    state_topic: "valetudo/walle/state"
    value_template: "{{ value_json.error }}"

  - platform: template
    sensors:
      marvin_current_charging:
        friendly_name: "Marvin Charging with"
        value_template: "{{ (states.sensor.marvin_charging_rate_sensor.attributes.charger_actual_current * states.sensor.marvin_charging_rate_sensor.attributes.charger_voltage / 1000 ) | round(1) }}"
        unit_of_measurement: "kW"

  - platform: integration
    source: sensor.house_consumption
    name: integer_power_home_consumption
    unit_prefix: k
    round: 2
  - platform: integration
    source: sensor.house_energy
    name: integer_house_energy
    unit_prefix: k
    round: 2
  - platform: integration
    source: sensor.solar_yield
    name: integer_solar_yield
    unit_prefix: k
  - platform: integration
    source: sensor.stromz_leistung
    name: integer_stromz_leistung
    unit_prefix: k
    round: 2

